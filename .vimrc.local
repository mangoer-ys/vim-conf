nnoremap [m  <Esc> : tabprevious<CR>
nnoremap ]m  <Esc> : tabnext<CR>

" new tab
nnoremap <C-t>      : tabnew<CR>
inoremap <C-t><Esc> : tabnew<CR>

" tab switch
nnoremap <C-e> :bnext<CR>
nnoremap <C-r> :bpre<CR>

" windows maximize
nnoremap <C-W>O     :call VjMaximizeToggle()<CR>
nnoremap <C-W>o     :call VjMaximizeToggle()<CR>
nnoremap <C-W><C-O> :call VjMaximizeToggle()<CR>

nmap <F5>              : NERDTreeFocus<cr>R<c-w><c-p>
nnoremap <silent><F7>  : TagbarToggle<CR>
" nnoremap \t            : TagbarToggle<CR>
nnoremap <silent><F10> : NERDTreeTabsToggle<CR>
nnoremap \n            : NERDTreeTabsToggle<CR>
" NERDTree<F10>
noremap <Leader>sf <Esc>:NERDTreeFind<CR>

" translate
" Display translation in a window
nmap <silent> <Leader>t <Plug>TranslateW
vmap <silent> <Leader>t <Plug>TranslateWV
" Echo translation in the cmdline
nmap <silent> <Leader><Leader>t <Plug>Translate
vmap <silent> <Leader><Leader>t <Plug>TranslateV
" Replace the text with translation
nmap <silent> <Leader><Leader>r <Plug>TranslateR
vmap <silent> <Leader><Leader>r <Plug>TranslateRV
" Translate the text in clipboard
nmap <silent> <Leader><Leader>x <Plug>TranslateX

" next windows
" nnoremap f <C-W>w<CR>
nmap <C-w> <C-W>w<CR>
" map <C-h> <C-w>h
" map <C-j> <C-w>j
" map <C-k> <C-w>k
" map <C-l> <C-w>l

" ctrlsf
nmap <Leader><Leader>c :CtrlSF<CR>

" Split fast
nnoremap <leader>1 :vs<CR>
nnoremap <leader>- :sp<CR>

" CtrlP <C-p>
" <ESC> exit
nmap <F3> <Esc>:CtrlP<CR>
" noremap <Leader>be <Esc>:CtrlPBuffer<CR>
noremap <Leader>bm <Esc>:CtrlPMRU<CR>

" leaderf
" \f search file
" ctrl + b search word
" esc exit
noremap <C-B> :<C-U><C-R>=printf("Leaderf! rg")<CR><CR>

" <Leader>快捷键定义
" let mapleader = '\'

" 快速使.vimrc配置生效
map <silent> <Leader>V :source ~/.vimrc<CR>:filetype detect<CR>

" 快速保存
map <silent> `s <Esc>:w<CR>:exe ":echo 'saved'"<CR>

" 零时获取sudo权限[w!!]
cmap w!! %!sudo tee > /dev/null %

" DoxygenToolkit.vim
" 生成Doxygen风格的文档注释
noremap <Leader>dc <Esc>:Dox<CR>
noremap <Leader>da <Esc>:DoxAuthor<CR>
" noremap <Leader>dd <Esc>:DoxUndoc<CR>

" tcommment_vim
" 代码注释
noremap  <Leader>x :TComment<cr>
noremap  <Leader>X :TCommentRight<cr>
xnoremap <Leader>x :TCommentMaybeInline<cr>
noremap  <Leader>C :TCommentMaybeInline<cr>
noremap  <Leader>c :TCommentBlock<cr>
xnoremap <Leader>c :TCommentBlock<cr>

" vim-easy-align
vmap <Enter> <Plug>(EasyAlign)
vnoremap <Leader>: :EasyAlign:s0l1<CR>

" vim-easymotion
map <Leader><Leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>l <Plug>(easymotion-lineforward)
map <Leader><Leader>. <Plug>(easymotion-repeat)
map <Leader><Leader>2 <Plug>(easymotion-s2)

" markdown
" zR zr zm

" 智能大小写
set ignorecase
set smartcase

" cscope
" Avoiding duplicate cscope database error within VIM
set nocscopeverbose
" set cscopetag

" 永远屏蔽补全Scrtach Preview窗口
set completeopt-=preview


let g:NERDTreeDirArrows = 0
" 隐藏帮助说明和书签
let g:NERDTreeMinimalUI = 1
let g:NERDTreeShowHidden = 1
let g:NERDTreeIgnore = ['\~$','\.swp']
let g:NERDTreeChDirMode = 2

" nerdtree-git-plugin
let g:NERDTreeShowIgnoredStatus = 1
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

" 默认是否用 l 代替 o 打开文件
let g:vj_nerdtree_compatible = 1

" autocmd VimEnter * NERDTreeTabsToggle
" --- 若NERDTree是关闭其他Buffer后剩下的唯一窗口，则退出Vim
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" let g:nerdtree_tabs_autoclose=0
" --- 若使用Vim打开某个文件，则自动打开NERDTree的同时，将焦点也转移至新文件中
" autocmd VimEnter * if argc() | wincmd p | endif

" tagbar右侧结构树<F7>
let g:tagbar_indent = 1
let g:tagbar_autofocus = 1
let g:tagbar_show_linenumbers = 1
let g:tagbar_zoomwidth = 1
" let g:tagbar_autopreview = 1
" let g:tagbar_autoclose = 1
let g:tagbar_phpctags_memory_limit = '512M'
let g:tagbar_width = 30
let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }

let g:tagbar_type_javascript = {'ctagsbin' : '/usr/local/bin/jsctags' }

" phpfolding.vim
let g:php_folding=0

" 避免和supertab冲突
let g:SuperTabDefaultCompletionType = "context"

" 关闭phpcomplete 跳转功能,完全使用 ctags 与 cscope
let g:phpcomplete_enhance_jump_to_definition=0

" phpqa
let g:phpqa_codesniffer_args = "--standard=Zend"
" Don't run codesniffer on save (default = 1)
let g:phpqa_codesniffer_autorun = 0
let g:phpqa_messdetector_autorun = 0

" EasyMotion
let g:EasyMotion_leader_key='<leader>'
let g:EasyMotion_smartcase = 1
" map <C-O> <Leader><Leader>w
" map <C-E> <Leader><Leader>W

" 打开VJ时是否定位到最后一个编辑的文件
" let g:vj_open_last_file_mode = 1
" Nerdtree定位到最后一个文件
" let g:vj_source_from_code_mode = 0

" Ag.vim
let g:agprg="ag --skip-vcs-ignores  --smart-case --ignore-dir={_prj,node_modules,tmp}  --column"

" airline
let g:airline_powerline_fonts = 1
" let g:airline_section_b = '%{strftime("%c")}'
let g:airline_section_c = '%{strftime("%c")}'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#branch#enabled = 1
let g:airline_theme='luna'
" let g:airline#extensions#tabline#buffer_nr_show = 1

" syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_php_checkers = ['php']
let g:syntastic_java_checkers = ['']
" let g:syntastic_cpp_checkers = ['gcc']
" let g:syntastic_c_checkers = ['gcc']
" let g:syntastic_go_checkers = ['gofmt']
let g:syntastic_go_checkers = ['golint', 'govet', 'golangci-lint']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

" vim-go
" let g:go_version_warning = 0
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_types = 1
let g:go_highlight_methods = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
let g:go_fmt_autosave = 1
let g:go_fmt_command='goimports'
let g:go_debug_windows = {
      \ 'vars':       'rightbelow 60vnew',
      \ 'stack':      'rightbelow 10new',
\ }
let g:go_doc_popup_window = 1
let g:go_list_type = "quickfix"

" neocomplete
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1

" ctrlp
let g:ctrlp_working_path_mode = 'rw'
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn)$|(node_modules|_prj|tmp)$',
            \ 'file': '\v\.(exe|so|dll)$|.prjide',
            \ 'link': 'some_bad_symbolic_links',
            \ }

" leaderf
let g:Lf_PreviewInPopup = 1
let g:Lf_WindowPosition = 'popup'
